/**
 * Copyright 2023 Neckar IT GmbH, MÃ¶ssingen, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.meistercharts.history.storage


import assertk.*
import assertk.assertions.*
import com.meistercharts.history.HistoryBucket
import com.meistercharts.history.HistoryBucketDescriptor
import com.meistercharts.history.SamplingPeriod
import com.meistercharts.history.impl.HistoryChunk
import com.meistercharts.history.impl.createSinusChunk
import com.meistercharts.history.impl.io.SerializableHistoryBucketDescriptor
import com.meistercharts.history.impl.io.toSerializable
import it.neckar.open.serialization.roundTrip
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream

/**
 */
class HistoryStorageSerializerTest {
  @Test
  fun testSerializeDescriptor() {
    val descriptor = HistoryBucketDescriptor.forTimestamp(100000.0, SamplingPeriod.EveryTenMillis)
    val serializableDescriptor: SerializableHistoryBucketDescriptor = descriptor.toSerializable()

    val string = createPrettyJsonFormat().encodeToString(SerializableHistoryBucketDescriptor.serializer(), serializableDescriptor)

    //language=JSON
    roundTrip(
      serializableDescriptor,
      SerializableHistoryBucketDescriptor.serializer()
    ) {
      //language=JSON
      """
      {
        "index": 20.0,
        "bucketRange": "FiveSeconds"
      }
    """
    }
  }

  @Test
  fun testSerializeHistoryValues() {
    val descriptor = HistoryBucketDescriptor.forTimestamp(100000.0, SamplingPeriod.EveryTenMillis)
    val chunk = createSinusChunk(descriptor)

    val historyValues = chunk.values

    //language=JSON
    roundTrip(
      historyValues
    ) {
      //language=JSON
      """
        {
          "decimalHistoryValues" : {
            "values" : "",
            "minValues" : null,
            "maxValues" : null
          },
          "enumHistoryValues" : {
            "values" : "AAAB9A==",
            "mostOfTheTimeValues" : null
          },
          "referenceEntryHistoryValues" : {
            "values" : "AAAB9A==",
                "differentIdsCount" : null,
                "dataMaps" : [ ]
          }
        }
        """
    }
  }

  @Test
  fun testSerializeHistoryChunk() {
    val descriptor = HistoryBucketDescriptor.forTimestamp(100000.0, SamplingPeriod.EveryTenMillis)
    val chunk = createSinusChunk(descriptor)

    //language=JSON
    roundTrip(
      chunk, HistoryChunk.serializer()
    ) {
      //language=JSON
      """
        {
          "configuration" : {
            "decimalConfiguration" : {
              "dataSeriesIds" : [ 10, 11, 12 ],
              "displayNames" : [ {
                "key" : "val1",
                "fallbackText" : "Value 1"
              }, {
                "key" : "val2",
                "fallbackText" : "Value 2"
              }, {
                "key" : "val3",
                "fallbackText" : "Value 3"
              } ],
              "units" : [ "kg", "cm", null ]
            },
            "enumConfiguration" : {
              "dataSeriesIds" : [ ],
              "displayNames" : [ ],
              "enums" : [ ]
            },
            "referenceEntryConfiguration" : {
              "dataSeriesIds" : [ ],
              "displayNames" : [ ]
            }
          },
          "timeStamps" : [ 100000.0, 100010.0, 100020.0, 100030.0, 100040.0, 100050.0, 100060.0, 100070.0, 100080.0, 100090.0, 100100.0, 100110.0, 100120.0, 100130.0, 100140.0, 100150.0, 100160.0, 100170.0, 100180.0, 100190.0, 100200.0, 100210.0, 100220.0, 100230.0, 100240.0, 100250.0, 100260.0, 100270.0, 100280.0, 100290.0, 100300.0, 100310.0, 100320.0, 100330.0, 100340.0, 100350.0, 100360.0, 100370.0, 100380.0, 100390.0, 100400.0, 100410.0, 100420.0, 100430.0, 100440.0, 100450.0, 100460.0, 100470.0, 100480.0, 100490.0, 100500.0, 100510.0, 100520.0, 100530.0, 100540.0, 100550.0, 100560.0, 100570.0, 100580.0, 100590.0, 100600.0, 100610.0, 100620.0, 100630.0, 100640.0, 100650.0, 100660.0, 100670.0, 100680.0, 100690.0, 100700.0, 100710.0, 100720.0, 100730.0, 100740.0, 100750.0, 100760.0, 100770.0, 100780.0, 100790.0, 100800.0, 100810.0, 100820.0, 100830.0, 100840.0, 100850.0, 100860.0, 100870.0, 100880.0, 100890.0, 100900.0, 100910.0, 100920.0, 100930.0, 100940.0, 100950.0, 100960.0, 100970.0, 100980.0, 100990.0, 101000.0, 101010.0, 101020.0, 101030.0, 101040.0, 101050.0, 101060.0, 101070.0, 101080.0, 101090.0, 101100.0, 101110.0, 101120.0, 101130.0, 101140.0, 101150.0, 101160.0, 101170.0, 101180.0, 101190.0, 101200.0, 101210.0, 101220.0, 101230.0, 101240.0, 101250.0, 101260.0, 101270.0, 101280.0, 101290.0, 101300.0, 101310.0, 101320.0, 101330.0, 101340.0, 101350.0, 101360.0, 101370.0, 101380.0, 101390.0, 101400.0, 101410.0, 101420.0, 101430.0, 101440.0, 101450.0, 101460.0, 101470.0, 101480.0, 101490.0, 101500.0, 101510.0, 101520.0, 101530.0, 101540.0, 101550.0, 101560.0, 101570.0, 101580.0, 101590.0, 101600.0, 101610.0, 101620.0, 101630.0, 101640.0, 101650.0, 101660.0, 101670.0, 101680.0, 101690.0, 101700.0, 101710.0, 101720.0, 101730.0, 101740.0, 101750.0, 101760.0, 101770.0, 101780.0, 101790.0, 101800.0, 101810.0, 101820.0, 101830.0, 101840.0, 101850.0, 101860.0, 101870.0, 101880.0, 101890.0, 101900.0, 101910.0, 101920.0, 101930.0, 101940.0, 101950.0, 101960.0, 101970.0, 101980.0, 101990.0, 102000.0, 102010.0, 102020.0, 102030.0, 102040.0, 102050.0, 102060.0, 102070.0, 102080.0, 102090.0, 102100.0, 102110.0, 102120.0, 102130.0, 102140.0, 102150.0, 102160.0, 102170.0, 102180.0, 102190.0, 102200.0, 102210.0, 102220.0, 102230.0, 102240.0, 102250.0, 102260.0, 102270.0, 102280.0, 102290.0, 102300.0, 102310.0, 102320.0, 102330.0, 102340.0, 102350.0, 102360.0, 102370.0, 102380.0, 102390.0, 102400.0, 102410.0, 102420.0, 102430.0, 102440.0, 102450.0, 102460.0, 102470.0, 102480.0, 102490.0, 102500.0, 102510.0, 102520.0, 102530.0, 102540.0, 102550.0, 102560.0, 102570.0, 102580.0, 102590.0, 102600.0, 102610.0, 102620.0, 102630.0, 102640.0, 102650.0, 102660.0, 102670.0, 102680.0, 102690.0, 102700.0, 102710.0, 102720.0, 102730.0, 102740.0, 102750.0, 102760.0, 102770.0, 102780.0, 102790.0, 102800.0, 102810.0, 102820.0, 102830.0, 102840.0, 102850.0, 102860.0, 102870.0, 102880.0, 102890.0, 102900.0, 102910.0, 102920.0, 102930.0, 102940.0, 102950.0, 102960.0, 102970.0, 102980.0, 102990.0, 103000.0, 103010.0, 103020.0, 103030.0, 103040.0, 103050.0, 103060.0, 103070.0, 103080.0, 103090.0, 103100.0, 103110.0, 103120.0, 103130.0, 103140.0, 103150.0, 103160.0, 103170.0, 103180.0, 103190.0, 103200.0, 103210.0, 103220.0, 103230.0, 103240.0, 103250.0, 103260.0, 103270.0, 103280.0, 103290.0, 103300.0, 103310.0, 103320.0, 103330.0, 103340.0, 103350.0, 103360.0, 103370.0, 103380.0, 103390.0, 103400.0, 103410.0, 103420.0, 103430.0, 103440.0, 103450.0, 103460.0, 103470.0, 103480.0, 103490.0, 103500.0, 103510.0, 103520.0, 103530.0, 103540.0, 103550.0, 103560.0, 103570.0, 103580.0, 103590.0, 103600.0, 103610.0, 103620.0, 103630.0, 103640.0, 103650.0, 103660.0, 103670.0, 103680.0, 103690.0, 103700.0, 103710.0, 103720.0, 103730.0, 103740.0, 103750.0, 103760.0, 103770.0, 103780.0, 103790.0, 103800.0, 103810.0, 103820.0, 103830.0, 103840.0, 103850.0, 103860.0, 103870.0, 103880.0, 103890.0, 103900.0, 103910.0, 103920.0, 103930.0, 103940.0, 103950.0, 103960.0, 103970.0, 103980.0, 103990.0, 104000.0, 104010.0, 104020.0, 104030.0, 104040.0, 104050.0, 104060.0, 104070.0, 104080.0, 104090.0, 104100.0, 104110.0, 104120.0, 104130.0, 104140.0, 104150.0, 104160.0, 104170.0, 104180.0, 104190.0, 104200.0, 104210.0, 104220.0, 104230.0, 104240.0, 104250.0, 104260.0, 104270.0, 104280.0, 104290.0, 104300.0, 104310.0, 104320.0, 104330.0, 104340.0, 104350.0, 104360.0, 104370.0, 104380.0, 104390.0, 104400.0, 104410.0, 104420.0, 104430.0, 104440.0, 104450.0, 104460.0, 104470.0, 104480.0, 104490.0, 104500.0, 104510.0, 104520.0, 104530.0, 104540.0, 104550.0, 104560.0, 104570.0, 104580.0, 104590.0, 104600.0, 104610.0, 104620.0, 104630.0, 104640.0, 104650.0, 104660.0, 104670.0, 104680.0, 104690.0, 104700.0, 104710.0, 104720.0, 104730.0, 104740.0, 104750.0, 104760.0, 104770.0, 104780.0, 104790.0, 104800.0, 104810.0, 104820.0, 104830.0, 104840.0, 104850.0, 104860.0, 104870.0, 104880.0, 104890.0, 104900.0, 104910.0, 104920.0, 104930.0, 104940.0, 104950.0, 104960.0, 104970.0, 104980.0, 104990.0 ],
          "values" : {
            "decimalHistoryValues" : {
              "values" : "",
              "minValues" : null,
              "maxValues" : null
            },
            "enumHistoryValues" : {
              "values" : "AAAB9A==",
              "mostOfTheTimeValues" : null
            },
            "referenceEntryHistoryValues" : {
              "values" : "AAAB9A==",
                  "differentIdsCount" : null,
                  "dataMaps" : [ ]
            }
          },
          "recordingType" : "Measured"
        }
      """
    }
  }

  @Disabled
  @Test
  fun testStorage() {
    val serializer = JsonHistoryStorageSerializer()

    val descriptor = HistoryBucketDescriptor.forTimestamp(100000.0, SamplingPeriod.EveryTenMillis)
    val bucket = HistoryBucket(descriptor, createSinusChunk(descriptor))

    val outputStream = ByteArrayOutputStream()

    outputStream.use { it ->
      serializer.serialize(bucket, it)
    }

    val serializedString = outputStream.toString()
    println("$serializedString")

    //language=JSON
    assertThat(serializedString).isEqualTo(
      """
        {
          "descriptor": {
            "bucketRange": "FiveSeconds",
            "start": 100000.0,
            "end": 105000.0
          },
          "chunk": {
            "dataSeriesIds": [
            ],
            "timeStamps": [
              100000.0,
              105000.0
            ],
            "values": "AAA=",
            "decimalPlaces": [
            ],
            "displayNames": [
            ]
          }
        }
      """.trimIndent()
    )

    val deserialized = ByteArrayInputStream(outputStream.toByteArray()).use {
      serializer.deserialize(it)
    }

    assertThat(deserialized).isEqualTo(bucket)
  }
}
